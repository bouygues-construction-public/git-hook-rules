#!/bin/bash

# Check if /dev/tty is available
INTERACTIVE=0
if sh -c ": >/dev/tty" >/dev/null 2>/dev/null; then
   INTERACTIVE=1
   exec </dev/tty
fi

# Update violation-checklist.txt data
if [ $(date -r .git/rules/violation-checklist.txt "+%m-%d-%Y") != $(date "+%m-%d-%Y") ]; then
   curl -s --cacert .git/ssl/raw.githubusercontent.com.crt -o .git/rules/violation-checklist.txt https://raw.githubusercontent.com/bouygues-construction-public/git-hook-rules/refs/heads/main/hooks/violation-checklist.txt
fi

RED="\e[31m"
YELLOW="\e[33m"
BLUE="\e[34m"
ENDCOLOR="\e[0m"

NEWLINE=$'\n'

declare -a FILE_NAMES
declare -a FILE_DIFFS

FILE_INDEX=-1
flag=0
while IFS= read -r line; do
   if [[ "$line" =~ ^diff\ --git ]]; then
      FILE_INDEX=$((FILE_INDEX + 1))
      FILE_NAMES[$FILE_INDEX]=$(echo "$line" | grep -o -E '\sb\/(.*)$' | sed 's/\sb\///')
      flag=0
   else
      if [ $flag -lt 5 ]; then
         flag=$((flag + 1))
         continue
      fi
      if [[ "$line" =~ ^\+ ]]; then
         STRING=$(echo "$line" | sed -e 's/^\+//')
         FILE_DIFFS[$FILE_INDEX]="${FILE_DIFFS[$FILE_INDEX]}$STRING$NEWLINE"
      fi
   fi
done < <(git diff --staged --diff-filter=ACM --no-color --unified=0)

ROOT_DIR="$(pwd)/"

ERRORS_LOGS=""
WARNING_LOGS=""

readarray -t RULE_LINES <.git/rules/violation-checklist.txt

for INDEX in "${!FILE_NAMES[@]}"; do
   FILE_NAME="${FILE_NAMES[$INDEX]}"
   DIFF="${FILE_DIFFS[$INDEX]}"

   FILE_ERROR=""
   FILE_WARNING=""

   for line in "${RULE_LINES[@]}"; do
      IFS=$'\t' read -r -a ruleArr <<< "$line"

      if [ ${#ruleArr[@]} -lt 4 ]; then
         continue
      fi

      if [[ "$FILE_NAME" =~ .${ruleArr[0]}$ ]]; then
         PATTERN=$(echo "${ruleArr[3]}" | tr -d '\r')
         ERRORS=$(echo "$DIFF" | awk -v IGNORECASE=1 "$PATTERN")

         if [ -n "$ERRORS" ]; then
            if [ "${ruleArr[1]}" == "E" ]; then
               FILE_ERROR="$FILE_ERROR\n$ERRORS"
            else
               FILE_WARNING="$FILE_WARNING\n$ERRORS"
            fi
         fi
      fi
   done

   if [ -n "$FILE_ERROR" ]; then
      ERRORS_LOGS="$ERRORS_LOGS\n\nFile: ${BLUE}$FILE_NAME${ENDCOLOR}\n${RED}$FILE_ERROR${ENDCOLOR}"
   fi
   if [ -n "$FILE_WARNING" ]; then
      WARNING_LOGS="$WARNING_LOGS\n\nFile: ${BLUE}$FILE_NAME${ENDCOLOR}\n${RED}$FILE_WARNING${ENDCOLOR}"
   fi
done

if [ "$INTERACTIVE" == "0" ]; then
   if [ -n "$ERRORS_LOGS" ] || [ -n "$WARNING_LOGS" ]; then
      echo "There are some code snippets that violate data security rules, please check the commit log to fix them. You should commit code using CLI"
      echo -e "$ERRORS_LOGS\n"
      if [ -n "$WARNING_LOGS" ]; then
         echo -e ".The warning code snippets:"
         echo -e "$WARNING_LOGS\n"
      fi
      exit 1
   fi
else
   if [ -n "$ERRORS_LOGS" ]; then
      echo -e "${YELLOW}There are some code snippets that violate data security rules:${ENDCOLOR}"
      echo -e "$ERRORS_LOGS\n"
      if [ -n "$WARNING_LOGS" ]; then
         echo -e "${YELLOW}...and the warning code snippets:${ENDCOLOR}"
         echo -e "$WARNING_LOGS\n"
      fi
      exit 1
   elif [ -n "$WARNING_LOGS" ]; then
      echo -e "${YELLOW}There are some code snippets that violate data security rules:${ENDCOLOR}"
      echo -e "$WARNING_LOGS\n"
      read -p "Do you want to continue commit code? (y/n) " -n 1 -r
      echo
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
         echo -e "You canceled the commit."
         exit 1
      fi
   fi
fi
